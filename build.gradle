import org.gradle.api.artifacts.*

buildscript {
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "2.0.4"
    id "com.github.spotbugs" version "1.6.2"
    id "java-library"
    id "maven-publish"
    id "checkstyle"
    id "signing"
    id "jacoco"
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

allprojects {
    group = "ninja.javahacker.jaspasema"
    version = "0.4.0"

    ext.javaCompiler = "1.9"
    ext.lombokEdge = false
    ext.doclint = false
    ext.extraCompilerArgs = [
        "--add-modules", "java.xml.ws.annotation",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ]

    ext.versionApiguardian = "1.0.0"
    ext.versionCheckstyle = "8.12"
    ext.versionFindSecBugs = "1.8.0"
    ext.versionHibernate = "5.3.5.Final"
    ext.versionHibernateAnnotations = "5.0.4.Final"
    ext.versionJackson = "2.9.6"
    ext.versionJaCoCo = "0.8.1"
    ext.versionJaxb = "2.4.0-b180725.0427"
    ext.versionJcip = "1.0"
    ext.versionJpa = "2.2"
    ext.versionJpaSimpleTransactions = version
    ext.versionJunit = "5.3.0-RC1"
    ext.versionJsr305 = "3.0.2"
    ext.versionLombok = "1.18.2"
    ext.versionPmd = "6.6.0"
    ext.versionReflections = "0.9.11"
    ext.versionReifiedGenerics = version
    ext.versionSpark = "2.7.2"
    ext.versionSpotBugs = "3.1.6"
}

println "Using Java " + org.gradle.api.JavaVersion.current() + "."

subprojects {
    apply plugin: "com.github.spotbugs"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "checkstyle"
    apply plugin: "signing"
    apply plugin: "jacoco"

    repositories {
        flatDir {
            dirs 'libs'
        }
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    dependencies {

        // Jackson
        api group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${versionJackson}"
        api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${versionJackson}"
        api group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${versionJackson}"
        api group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: "${versionJackson}"
        api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${versionJackson}"
        api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: "${versionJackson}"

        // JUnit
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${versionJunit}"
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${versionJunit}"
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${versionJunit}"
        testCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: "${versionApiguardian}"

        // Lombok
        if (!lombokEdge) {
            annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${versionLombok}"
            compileOnly group: 'org.projectlombok', name: 'lombok', version: "${versionLombok}"
            testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${versionLombok}"
            testCompileOnly group: 'org.projectlombok', name: 'lombok', version: "${versionLombok}"
        } else {
            annotationProcessor files("libs/lombok-edge.jar")
            compileOnly files("libs/lombok-edge.jar")
            testAnnotationProcessor files("libs/lombok-edge.jar")
            testCompileOnly files("libs/lombok-edge.jar")
        }

        // PMD
        compileOnly group: 'net.sourceforge.pmd', name: 'pmd', version: "${versionPmd}"
        testCompileOnly group: 'net.sourceforge.pmd', name: 'pmd', version: "${versionPmd}"

        // Reified-Generics
        api group: 'ninja.javahacker', name: 'reified-generic', version: "${versionReifiedGenerics}"

        // Spark
        api group: 'com.sparkjava', name: 'spark-core', version: "${versionSpark}"

        // SpotBugs + Find Security Bugs
        compileOnly group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: "${versionFindSecBugs}"
        compileOnly group: 'net.jcip', name: 'jcip-annotations', version: "${versionJcip}"
        compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${versionSpotBugs}"
        compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: "${versionJsr305}"
        testCompileOnly group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: "${versionFindSecBugs}"
        testCompileOnly group: 'net.jcip', name: 'jcip-annotations', version: "${versionJcip}"
        testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${versionSpotBugs}"
        testCompileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: "${versionJsr305}"
    }

    task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
        sourceSets*.allSource*.srcDirs*.each { File srcDir ->
            if (!srcDir.isDirectory()) {
                println "Creating source folder: ${srcDir}"
                srcDir.mkdirs()
            }
        }
    }

    checkstyle {
        toolVersion = "${versionCheckstyle}"
        configFile = rootProject.file("config/checkstyle/checkstyle.xml")
        configProperties = [
            "checkstyle.cache.file": "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = true
        showViolations = true
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = javaCompiler
        targetCompatibility = javaCompiler
        options.encoding = 'UTF-8'
        options.debug = true
        options.fork = true
        options.compilerArgs << "-parameters" << "-Xlint:all,-processing"
        if (doclint) options.compilerArgs << "-Xdoclint:all"
        extraCompilerArgs.each { e -> options.compilerArgs << e }
    }

    tasks.withType(Javadoc) {
        options.encoding = "UTF-8"
        options.docEncoding = "UTF-8"
        options.addBooleanOption('html5', true)
        options.tags = ["apiNote:a:API Note:", "implSpec:a:Implementation Requirements:", "implNote:a:Implementation Note:"]
    }

    checkstyle {
        toolVersion = "${versionCheckstyle}"
        configFile = rootProject.file("config/checkstyle/checkstyle.xml")
        configProperties = [
            "checkstyle.cache.file": "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = true
        showViolations = true
    }

    spotbugs {
        toolVersion = "${versionSpotBugs}"
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    jar {
        duplicatesStrategy = "exclude"
        inputs.property("moduleName", "${group}.${baseName}")
        manifest {
            attributes("Automatic-Module-Name": "${group}.${baseName}")
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier "sources"
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier "javadoc"
    }

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = "${versionJaCoCo}"
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId jar.baseName
                from components.java

                artifact sourcesJar
                artifact javadocJar
                pom {
                    developers {
                        developer {
                            name = 'Victor Williams Stafusa da Silva'
                            email = 'victorwssilva@gmail.com'
                        }
                    }
                }
            }
        }
        repositories {
            mavenLocal()
        }
    }
}

task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
    title = 'All modules'
    destinationDir = new File(project.buildDir, 'merged-javadoc')

    // Note: The closures below are executed lazily.
    source {
       subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}

project(':core') {
    jar {
        baseName = "core"
    }
}

project(':app') {
    jar {
        baseName = "app"
    }
    dependencies {
        api project(':core')

        // Reflections
        api group: 'org.reflections', name: 'reflections', version: "${versionReflections}"

        // JPA
        api group: 'javax.persistence', name: 'javax.persistence-api', version: "${versionJpa}"

        // JPA Simple Transactions.
        api group: 'ninja.javahacker', name: 'jpa-simple-transactions', version: "${versionJpaSimpleTransactions}"

        // Hibernate.
        runtimeOnly group: 'org.hibernate', name: 'hibernate-core', version: "${versionHibernate}"
        runtimeOnly group: 'org.hibernate.common', name: 'hibernate-commons-annotations', version: "${versionHibernateAnnotations}"
    }
}