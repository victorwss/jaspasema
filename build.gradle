plugins {
    id("com.github.spotbugs") version "6.0.22"
    id("java-library")
    id("maven-publish")
    id("checkstyle")
    id("signing")
    id("jacoco")
    id("pmd")
    id("project-report")
}

allprojects {
    group = "ninja.javahacker.jaspasema"
    version = "1.1.0-2024.11.10"
}

def repoUrl = "file:///${System.getenv('maven.repo.local')}".replace("\\", "/")

def versionJavaCompiler = "17"
def doclint = true

def versionApiguardian = "1.1.2"
def versionAsm         = "9.7"
def versionCheckstyle  = "10.18.2"
def versionEclipselink = "5.0.0-B03"
def versionFindSecBugs = "1.14.0-SNAPSHOT"
def versionJackson     = "2.18.1"
def versionJaCoCo      = "0.8.12"
def versionJavalin     = "6.3.0"
def versionJaxb        = "4.0.5"
def versionJakartaAnno = "3.0.0"
def versionJakartaCdi  = "4.1.0"
def versionJakartaEl   = "6.0.1"
def versionJakartaInj  = "2.0.1"
def versionJakartaInt  = "2.2.0"
def versionJakartaJpa  = "3.2.0"
def versionJakartaJta  = "2.0.1"
def versionJcip        = "1.0-1"
def versionJunit       = "5.11.2"
def versionJunitPlatf  = "1.11.2"
def versionLombok      = "1.18.35"
def versionMySql       = "9.1.0"
def versionPmd         = "7.6.0"
def versionReflections = "0.10.2"
def versionSbContrib   = "7.6.5"
def versionServlet     = "6.1.0"
def versionSpotBugs    = "4.8.6"
def versionSlf4j       = "2.0.16"

def versionMocker                = version
def versionJpaSimpleTransactions = version
def versionReifiedGenerics       = version

println("Using Java " + org.gradle.api.JavaVersion.current() + ".")
println("Local repo: ${repoUrl}")

allprojects {
    configurations {
        scm
        doc {
            transitive(false)
        }
    }

    repositories {
        flatDir {
            dirs("../libs")
        }
        maven {
            url(repoUrl)
        }
        mavenCentral()
        gradlePluginPortal()
        maven {
            url("https://maven.cleanroommc.com/")
        }
        if ("edge" in versionLombok) {
            maven {
                url("https://projectlombok.org/edge-releases")
            }
        }
    }

    task delombok {
    }
}

subprojects {
    apply(plugin: "com.github.spotbugs")
    apply(plugin: "java-library")
    apply(plugin: "maven-publish")
    apply(plugin: "checkstyle")
    apply(plugin: "signing")
    apply(plugin: "jacoco")
    apply(plugin: "pmd")
    apply(plugin: "project-report")

    dependencies {

        // Jackson.
        api(group: "com.fasterxml.jackson.core"    , name: "jackson-core"                  , version: versionJackson)
        api(group: "com.fasterxml.jackson.core"    , name: "jackson-databind"              , version: versionJackson)
        api(group: "com.fasterxml.jackson.core"    , name: "jackson-annotations"           , version: versionJackson)
        api(group: "com.fasterxml.jackson.module"  , name: "jackson-module-parameter-names", version: versionJackson)
        api(group: "com.fasterxml.jackson.datatype", name: "jackson-datatype-jsr310"       , version: versionJackson)
        api(group: "com.fasterxml.jackson.datatype", name: "jackson-datatype-jdk8"         , version: versionJackson)

        // Javalin.
        api(group: "io.javalin", name: "javalin", version: versionJavalin)

        // JUnit.
        testImplementation(group: "org.junit.platform", name: "junit-platform-launcher", version: versionJunitPlatf )
        testImplementation(group: "org.junit.jupiter" , name: "junit-jupiter-api"      , version: versionJunit      )
        testImplementation(group: "org.junit.jupiter" , name: "junit-jupiter-params"   , version: versionJunit      )
        testImplementation(group: "org.junit.jupiter" , name: "junit-jupiter-engine"   , version: versionJunit      )
        testImplementation(group: "org.apiguardian"   , name: "apiguardian-api"        , version: versionApiguardian)

        // Lombok.
        annotationProcessor    (group: "org.projectlombok", name: "lombok", version: versionLombok)
        compileOnlyApi         (group: "org.projectlombok", name: "lombok", version: versionLombok)
        testAnnotationProcessor(group: "org.projectlombok", name: "lombok", version: versionLombok)
        testCompileOnly        (group: "org.projectlombok", name: "lombok", version: versionLombok)

        // Reified-Generics.
        api(group: "ninja.javahacker", name: "reified-generic", version: versionReifiedGenerics)

        // SLF4J.
        implementation(group: "org.slf4j", name: "slf4j-api"   , version: versionSlf4j)
        implementation(group: "org.slf4j", name: "slf4j-simple", version: versionSlf4j)

        // SpotBugs + plugins + dependencies.
        compileOnlyApi (group: "com.github.stephenc.jcip"  , name: "jcip-annotations"    , version: versionJcip       )
        compileOnlyApi (group: "com.github.spotbugs"       , name: "spotbugs-annotations", version: versionSpotBugs   )
        spotbugsPlugins(group: "com.h3xstream.findsecbugs" , name: "findsecbugs-plugin"  , version: versionFindSecBugs)
        spotbugsPlugins(group: "com.mebigfatguy.sb-contrib", name: "sb-contrib"          , version: versionSbContrib  )
        spotbugs(group: "com.github.spotbugs", name: "spotbugs"    , version: versionSpotBugs)
        spotbugs(group: "org.slf4j"          , name: "slf4j-api"   , version: versionSlf4j   )
        spotbugs(group: "org.slf4j"          , name: "slf4j-simple", version: versionSlf4j   )
        spotbugs(group: "org.ow2.asm"        , name: "asm"         , version: versionAsm     )
        spotbugs(configurations.spotbugsPlugins.dependencies)
        spotbugs(configurations.apiElements.dependencies    )
    }

    delombok {
        description = "Delomboks the source code."
        doLast {
            configurations {
                delombokAll {
                    extendsFrom(compileClasspath)
                    canBeResolved = true
                }
            }
            def justDelombok = "${configurations.annotationProcessor.asPath};"
            def delombokPath = "${configurations.delombokAll.asPath};"
            ant.mkdir(dir: "build/src-delomboked")
            ant.taskdef(name: "delombok", classname: "lombok.delombok.ant.Tasks\$Delombok", classpath: justDelombok)
            ant.delombok(verbose: "false", encoding: "UTF-8", to: "build/src-delomboked", from: "src/main/java", modulepath: delombokPath)
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.debug = true
        options.fork = true
        options.compilerArgs << "-parameters"
        options.compilerArgs << "-Xlint:all,-processing"
        options.compilerArgs << "-Xmaxwarns" << "1000"
        options.compilerArgs << "-Xmaxerrs" << "1000"
        doFirst {
            options.compilerArgs += [
                "--module-path", classpath.asPath
            ]
            classpath = files()
        }
    }

    compileJava {
        dependsOn(delombok)
        source = ["build/src-delomboked"]
        sourceCompatibility = versionJavaCompiler
        targetCompatibility = versionJavaCompiler
        if (doclint) {
            options.compilerArgs << "-Xdoclint:all/protected"
        } else {
            options.compilerArgs << "-Xdoclint:none"
        }
    }

    compileTestJava {
        dependsOn(compileJava)
        sourceCompatibility = org.gradle.api.JavaVersion.current()
        targetCompatibility = org.gradle.api.JavaVersion.current()
        options.compilerArgs << "-Xdoclint:none"
    }

    javadoc {
        dependsOn(delombok)
        source = ["build/src-delomboked"]
        options.encoding = "UTF-8"
        options.charSet = "UTF-8"
        options.docEncoding = "UTF-8"
        options.docTitle = "${project.name} API"
        options.windowTitle = "${project.name} API"
        options.header = "<b>${project.name}</b>"
        options.addBooleanOption("html5", true)
        options.tags = ["apiNote:a:API Note:", "implSpec:a:Implementation Requirements:", "implNote:a:Implementation Note:"]
        if (doclint) {
            options.addBooleanOption("Xdoclint:all", true)
        } else {
            options.addBooleanOption("Xdoclint:none", true)
        }
        options.addStringOption("Xmaxerrs", "1000")
        options.addStringOption("Xmaxwarns", "1000")
        doFirst {
            options.modulePath += classpath
            classpath = files()
        }
    }

    checkstyleMain {
        configFile = rootProject.file("${rootDir}/config/checkstyle/main.xml")
    }

    checkstyleTest {
        configFile = rootProject.file("${rootDir}/config/checkstyle/test.xml")
    }

    checkstyle {
        toolVersion = versionCheckstyle
        configProperties = [
            "checkstyle.cache.file": "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = false
        showViolations = true
    }

    pmd {
        toolVersion = versionPmd
        ignoreFailures = true
    }

    spotbugs {
        toolVersion = versionSpotBugs
        effort = com.github.spotbugs.snom.Effort.MAX
        reportLevel = com.github.spotbugs.snom.Confidence.valueOf("LOW")
        omitVisitors = ["WeakExceptionMessaging", "OverlyPermissiveMethod"]
        ignoreFailures = true
    }

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            xml.required = false
            html.required = true
        }
    }

    jar {
        dependsOn(compileJava)
        duplicatesStrategy = "exclude"
    }

    task sourcesJar(type: Jar) {
        from(sourceSets.main.allSource)
        archiveClassifier = "sources"
    }

    task javadocJar(type: Jar) {
        dependsOn(javadoc)
        dependsOn(sourcesJar)
        archiveClassifier = "javadoc"
    }

    test {
        useJUnitPlatform()
        finalizedBy(jacocoTestReport)
        ignoreFailures = false
        defaultCharacterEncoding = "UTF-8"
        testLogging.showStandardStreams = true
    }

    jacoco {
        toolVersion = versionJaCoCo
    }

    jacocoTestReport {
        dependsOn(test)
        reports {
            xml.required = false
            csv.required = false
            html.required = true
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)
                artifact(sourcesJar)
                artifact(javadocJar)
                pom {
                    developers {
                        developer {
                            name = "Victor Williams Stafusa da Silva"
                            email = "victorwssilva@gmail.com"
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url = repoUrl
            }
        }
    }

    spotbugsTest.enabled = false
    pmdTest.enabled = false
    test.enabled = true
}

/*task mergedJavadoc(type: Javadoc) {
    dependsOn(":core:delombok")
    dependsOn(":app:delombok")
    dependsOn(":sampleproject:delombok")

    description = "Creates Javadoc from all the projects."
    title = "All modules"
    destinationDir = new File(project.buildDir, "merged-javadoc")

    // Note: The closures below are executed lazily.
    source {
       subprojects*.sourceSets*.main*.delombokAll
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}*/

project(":core") {
    def moduleName = "ninja.javahacker.jaspasema.core"
    description = "Jaspasema Core"

    jar {
        archiveBaseName = "jaspasema-core"
        inputs.property("moduleName", moduleName)
    }

    compileJava {
        dependsOn(":core:delombok")
    }
}

project(":app") {
    def moduleName = "ninja.javahacker.jaspasema.app"
    description = "Jaspasema App"

    jar {
        archiveBaseName = "jaspasema-app"
        inputs.property("moduleName", moduleName)
    }

    dependencies {
        api(project(":core"))

        // Reflections.
        implementation(group: "org.reflections", name: "reflections", version: versionReflections)

        // JPA.
        api(group: "jakarta.persistence", name: "jakarta.persistence-api", version: versionJakartaJpa)

        // JPA Simple Transactions.
        api(group: "ninja.javahacker.jpasimpletransactions", name: "core", version: versionJpaSimpleTransactions)
    }

    delombok {
        dependsOn(":core:jar")
    }
}

project(":sampleproject") {
    apply(plugin: "application")
    def moduleName = "ninja.javahacker.jaspasema.sampleproject"
    description = "Jaspasema Sample Project"

    application {
        mainClass = "ninja.javahacker.jaspasema.sampleproject.SampleProject"
    }

    jar {
        archiveBaseName = "jaspasema-sampleproject"
        inputs.property("moduleName", moduleName)
    }

    dependencies {
        implementation(project(":app"))

        // MySQL / MariaDB.
        api(group: "com.mysql", name: "mysql-connector-j", version: versionMySql)

        // Eclipselink.
        implementation(group: "org.eclipse.persistence", name: "org.eclipse.persistence.jpa", version: versionEclipselink)

        // JPA Simple Transactions.
        api(group: "ninja.javahacker.jpasimpletransactions", name: "core"       , version: versionJpaSimpleTransactions)
        api(group: "ninja.javahacker.jpasimpletransactions", name: "eclipselink", version: versionJpaSimpleTransactions)

        // Servlet.
        implementation(group: "jakarta.servlet", name: "jakarta.servlet-api", version: versionServlet)
    }

    delombok {
        dependsOn(":app:jar")
    }
}