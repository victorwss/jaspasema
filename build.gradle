plugins {
    id "com.github.spotbugs" version "1.6.9"
    id "java-library"
    id "maven-publish"
    id "checkstyle"
    id "signing"
    id "jacoco"
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

allprojects {
    group = "ninja.javahacker.jaspasema"
    version = "0.5.0"

    ext.javaCompiler = "11"
    ext.doclint = false
    ext.extraCompilerArgs = [
        "--add-opens", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ]

    ext.versionApiguardian = "1.0.0"
    ext.versionCheckstyle = "8.14"
    ext.versionFbContrib = "7.4.3.sb"
    ext.versionFindSecBugs = "1.8.0"
    ext.versionHibernate = "5.3.7.Final"
    ext.versionHibernateAnnotations = "5.0.4.Final"
    ext.versionJackson = "2.9.7"
    ext.versionJaCoCo = "0.8.2"
    ext.versionJaxb = "2.4.0-b180725.0427"
    ext.versionJcip = "1.0"
    ext.versionJpa = "2.2"
    ext.versionJpaSimpleTransactions = "0.5.0"
    ext.versionJunit = "5.3.1"
    ext.versionJsr305 = "3.0.2"
    ext.versionLombok = "1.18.4"
    ext.versionPmd = "6.9.0"
    ext.versionReflections = "0.9.11"
    ext.versionReifiedGenerics = "1.0.0"
    ext.versionSpark = "2.7.2"
    ext.versionSpotBugs = "3.1.8"
}

println "Using Java " + org.gradle.api.JavaVersion.current() + "."

subprojects {
    apply plugin: "com.github.spotbugs"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "checkstyle"
    apply plugin: "signing"
    apply plugin: "jacoco"

    repositories {
        flatDir {
            dirs 'libs'
        }
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    dependencies {

        // Jackson
        api group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versionJackson
        api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versionJackson
        api group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versionJackson
        api group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: versionJackson
        api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versionJackson
        api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: versionJackson

        // JUnit
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versionJunit
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versionJunit
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versionJunit
        testCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: versionApiguardian

        // Lombok
        if (versionLombok != "edge") {
            annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versionLombok
            compileOnly group: 'org.projectlombok', name: 'lombok', version: versionLombok
            testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versionLombok
            testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versionLombok
        } else {
            annotationProcessor files("../libs/lombok-edge.jar")
            compileOnly files("../libs/lombok-edge.jar")
            testAnnotationProcessor files("../libs/lombok-edge.jar")
            testCompileOnly files("../libs/lombok-edge.jar")
        }

        // PMD
        compileOnly group: 'net.sourceforge.pmd', name: 'pmd', version: versionPmd
        testCompileOnly group: 'net.sourceforge.pmd', name: 'pmd', version: versionPmd

        // Reified-Generics
        api group: 'ninja.javahacker', name: 'reified-generic', version: versionReifiedGenerics

        // Spark
        api group: 'com.sparkjava', name: 'spark-core', version: versionSpark

        // SpotBugs + plugins
        spotbugs group: 'com.github.spotbugs', name: 'spotbugs', version :versionSpotBugs
        spotbugs configurations.spotbugsPlugins.dependencies
        api group: 'net.jcip', name: 'jcip-annotations', version: versionJcip
        api group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: versionSpotBugs
        spotbugsPlugins group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: versionFindSecBugs
        spotbugsPlugins group: 'com.mebigfatguy.fb-contrib', name: 'fb-contrib', version: versionFbContrib
    }

    task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
        sourceSets*.allSource*.srcDirs*.each { File srcDir ->
            if (!srcDir.isDirectory()) {
                println "Creating source folder: ${srcDir}"
                srcDir.mkdirs()
            }
        }
    }

    checkstyleMain {
        configFile = rootProject.file("config/checkstyle/main.xml")
    }

    checkstyleTest {
        configFile = rootProject.file("config/checkstyle/test.xml")
    }

    checkstyle {
        toolVersion = versionCheckstyle
        configProperties = [
            "checkstyle.cache.file": "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = true
        showViolations = true
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = javaCompiler
        targetCompatibility = javaCompiler
        options.encoding = 'UTF-8'
        options.debug = true
        options.fork = true
        options.compilerArgs << "-parameters" << "-Xlint:all,-processing"
        extraCompilerArgs.each { e -> options.compilerArgs << e }
    }

    compileJava {
        if (doclint) options.compilerArgs << "-Xdoclint:all"
    }

    tasks.withType(Javadoc) {
        options.encoding = "UTF-8"
        options.docEncoding = "UTF-8"
        options.addBooleanOption('html5', true)
        options.tags = ["apiNote:a:API Note:", "implSpec:a:Implementation Requirements:", "implNote:a:Implementation Note:"]
    }

    spotbugs {
        toolVersion = versionSpotBugs
        effort = "max"
        reportLevel = "low"
        omitVisitors = ["WeakExceptionMessaging", "OverlyPermissiveMethod"]
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        pluginClasspath = project.configurations.spotbugsPlugins
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    spotbugsTest.enabled = false

    jar {
        duplicatesStrategy = "exclude"
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier "sources"
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier "javadoc"
    }

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = versionJaCoCo
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId jar.baseName
                from components.java

                artifact sourcesJar
                artifact javadocJar
                pom {
                    developers {
                        developer {
                            name = 'Victor Williams Stafusa da Silva'
                            email = 'victorwssilva@gmail.com'
                        }
                    }
                }
            }
        }
        repositories {
            mavenLocal()
        }
    }
}

task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
    title = 'All modules'
    destinationDir = new File(project.buildDir, 'merged-javadoc')

    // Note: The closures below are executed lazily.
    source {
       subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}

project(':core') {
    ext.moduleName = "ninja.javahacker.jaspasema.core"
    jar {
        baseName = "jaspasema-core"
        inputs.property("moduleName", moduleName)
        manifest {
            attributes("Automatic-Module-Name": moduleName)
        }
    }
}

project(':app') {
    ext.moduleName = "ninja.javahacker.jaspasema.app"
    jar {
        baseName = "jaspasema-app"
        inputs.property("moduleName", moduleName)
        manifest {
            attributes("Automatic-Module-Name": moduleName)
        }
    }
    dependencies {
        api project(':core')

        // Reflections
        api group: 'org.reflections', name: 'reflections', version: versionReflections

        // JPA
        api group: 'javax.persistence', name: 'javax.persistence-api', version: versionJpa

        // JPA Simple Transactions.
        api group: 'ninja.javahacker.jpasimpletransactions', name: 'core', version: versionJpaSimpleTransactions
        api group: 'ninja.javahacker.jpasimpletransactions', name: 'hibernate', version: versionJpaSimpleTransactions

        // Hibernate.
        runtimeOnly group: 'org.hibernate', name: 'hibernate-core', version: versionHibernate
        runtimeOnly group: 'org.hibernate.common', name: 'hibernate-commons-annotations', version: versionHibernateAnnotations
    }
}