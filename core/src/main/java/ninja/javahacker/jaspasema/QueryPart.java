package ninja.javahacker.jaspasema;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Year;
import java.time.YearMonth;
import java.util.List;
import lombok.NonNull;
import ninja.javahacker.jaspasema.exceptions.badmapping.BadServiceMappingException;
import ninja.javahacker.jaspasema.exceptions.badmapping.TypeRestrictionViolationException;
import ninja.javahacker.jaspasema.ext.ObjectUtils;
import ninja.javahacker.jaspasema.format.ObjectListParser;
import ninja.javahacker.jaspasema.format.ParameterParser;
import ninja.javahacker.jaspasema.format.ParseFunction;
import ninja.javahacker.jaspasema.processor.AnnotatedParameter;
import ninja.javahacker.jaspasema.processor.ParamProcessor;
import ninja.javahacker.jaspasema.processor.ParamSource;
import ninja.javahacker.reifiedgeneric.ReifiedGeneric;
import ninja.javahacker.reifiedgeneric.Wrappers;

/**
 * Denotes that the value of a method parameter should be read from a query string parameter.
 * Lists might be used for repeated query string parameters.
 *
 * <p>For example:</p>
 * <pre>
 *     &#64;Get
 *     &#64;Path("/foo")
 *     public String foo(
 *         &#64;QueryPart String bar,                                     // Uses the content of the "bar" query string parameter.
 *         &#64;QueryPart(name = "-foo-xxx") String userAgent,            // Uses the content of the "-foo-xxx" query string parameter.
 *         &#64;QueryPart(dateFormat = "dd/MM/uuuu") LocalDate loginDate) // Sets a date format for the "loginDate" query string parameter.
 *         &#64;QueryPart List&gt;String&lt; goo,                         // Uses the content of the "goo" possibly multiple query string parameters.
 *     {
 *         // Do stuff.
 *     }
 * </pre>
 * @author Victor Williams Stafusa da Silva
 */
@ParamSource(processor = QueryPart.Processor.class)
@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
public @interface QueryPart {

    /**
     * This tells which is the desired date format for converting the value of the query string parameter to an instance of
     * {@link LocalDate}, {@link LocalDateTime}, {@link LocalTime}, {@link Year}, {@link YearMonth} or {@link List}s of those.
     * <p>Example of valid formats includes {@code "dd-MM-uuuu"}, {@code "dd/MM/uuuu HH:mm:ss"}, {@code "MM/uuuu"} among others.</p>
     * <p>This field is mandatory if the parameter type is one of the aforemetioned formats. Otherwise, this field should not be used.</p>
     * @see <a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeFormatter.html#patterns">Patterns</a>
     * @return The desired date format.
     */
    public String dateFormat() default "";

    /**
     * The name of the query string parameter. Uses the name of the parameter if blank or left unspecified.
     * @return The name of the query string parameter.
     */
    public String name() default "";

    /**
     * Defines the name of the variable used to hold the value of this parameter in the autogenerated javascript stub.
     * If unspecified, this defaults to the parameter name.
     * @return The name of the variable used to hold the value of this parameter in the autogenerated javascript stub.
     */
    public String jsVar() default "";

    /**
     * The class that is responsible for processing the {@link QueryPart} annotation.
     * @author Victor Williams Stafusa da Silva
     */
    public static class Processor implements ParamProcessor<QueryPart> {

        private static final String SINGULAR_JS_TEMPLATE = ""
                + "__targetUrl += '&$PARAM$=' + encodeURI($JS$);";

        private static final String PLURAL_JS_TEMPLATE = ""
                + "for (let __elem in $JS$) {\n"
                + "    __targetUrl += '&$PARAM$=' + encodeURI($JS$[__elem]);\n"
                + "}";

        /**
         * Sole constructor.
         */
        public Processor() {
        }

        /**
         * {@inheritDoc}
         * @param <E> {@inheritDoc}
         * @param param {@inheritDoc}
         * @return {@inheritDoc}
         * @throws BadServiceMappingException {@inheritDoc}
         */
        @NonNull
        @Override
        @SuppressWarnings("unchecked")
        public <E> Stub<E> prepare(@NonNull AnnotatedParameter<QueryPart, E> param) throws BadServiceMappingException {
            var annotation = param.getAnnotation();
            var paramName = param.getParameterName();
            var choosenName = ObjectUtils.choose(annotation.name(), paramName);
            var js = ObjectUtils.choose(annotation.jsVar(), paramName);
            var target = param.getTarget();
            var isList = target.asClass() == List.class;
            if (isList && ParseFunction.accepts(Wrappers.unwrapIterable((ReifiedGeneric<List<E>>) target))) {
                var t1 = PLURAL_JS_TEMPLATE.replace("$JS$", js).replace("$PARAM$", choosenName);
                var parts = ObjectListParser.prepare((AnnotatedParameter<QueryPart, List<E>>) param, annotation.dateFormat());
                ParamProcessor.Worker<E> w = ctx -> (E) parts.make(ctx.queryParams(param.getParameterName()));
                return new Stub<>(w, js, t1);
            }
            if (!isList && ParseFunction.accepts(target)) {
                var t2 = SINGULAR_JS_TEMPLATE.replace("$JS$", js).replace("$PARAM$", choosenName);
                var part = ParameterParser.prepare(param, annotation.dateFormat());
                return new Stub<>(ctx -> part.make(ctx.queryParam(paramName)), js, t2);
            }
            throw new TypeRestrictionViolationException(
                    param,
                    TypeRestrictionViolationException.AllowedTypes.SIMPLE_AND_LIST);
        }
    }
}