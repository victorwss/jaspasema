package ninja.javahacker.jaspasema;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import lombok.NonNull;
import ninja.javahacker.jaspasema.exceptions.paramvalue.MalformedParameterValueException;
import ninja.javahacker.jaspasema.ext.ObjectUtils;
import ninja.javahacker.jaspasema.processor.AnnotatedParameter;
import ninja.javahacker.jaspasema.processor.JsonTypesProcessor;
import ninja.javahacker.jaspasema.processor.ParamProcessor;
import ninja.javahacker.jaspasema.processor.ParamSource;

/**
 * Denotes that the value of a method parameter should be read from the query string as
 * a JSON and the value desserialized as an object from that JSON.
 *
 * <p>For example:</p>
 * <pre>
 *     &#64;Get
 *     &#64;Path("/foo")
 *     public String foo(
 *         // Uses the content of the "f1" query string parameter, reads it as a JSON and deserializes a Fruit instance.
 *         &#64;QueryJson Fruit f1,
 *         // Uses the content of the "X-flavor" query string parameter, reads it as a JSON and deserializes a Flavor instance.
 *         &#64;QueryJson(name = "X-flavor") Flavor f2)
 *     {
 *         // Do stuff.
 *     }
 * </pre>
 * @author Victor Williams Stafusa da Silva
 */
@ParamSource(processor = QueryJson.Processor.class)
@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
public @interface QueryJson {

    /**
     * Defines if the JSON should be read in lenient mode or not.
     * In lenient mode, unknown properties in the JSON are simply ignored. In strict mode, their presence triggers an error.
     * <p>The default value is {@code false}. I.e. to NOT be lenient.</p>
     * @return If the JSON should be read in lenient mode or not.
     */
    public boolean lenient() default false;

    /**
     * The name of the query string parameter. Uses the name of the parameter if blank or left unspecified.
     * @return The name of the query string parameter.
     */
    public String name() default "";

    /**
     * Defines the name of the variable used to hold the value of this parameter in the autogenerated javascript stub.
     * If unspecified, this defaults to the parameter name.
     * @return The name of the variable used to hold the value of this parameter in the autogenerated javascript stub.
     */
    public String jsVar() default "";

    /**
     * The class that is responsible for processing the {@link QueryJson} annotation.
     * @author Victor Williams Stafusa da Silva
     */
    public static class Processor implements ParamProcessor<QueryJson> {

        private static final String TEMPLATE = "targetUrl += '&#N#=' + encodeURI(JSON.stringify(#JS#));";

        /**
         * Sole constructor.
         */
        public Processor() {
        }

        /**
         * {@inheritDoc}
         * @param <E> {@inheritDoc}
         * @param param {@inheritDoc}
         * @return {@inheritDoc}
         */
        @NonNull
        @Override
        public <E> Stub<E> prepare(@NonNull AnnotatedParameter<QueryJson, E> param) {
            var annotation = param.getAnnotation();
            var paramName = param.getParameterName();
            var choosenName = ObjectUtils.choose(annotation.name(), paramName);
            var js = ObjectUtils.choose(annotation.jsVar(), paramName);
            var target = TEMPLATE.replace("#N#", choosenName).replace("#JS#", js);
            ParamProcessor.Worker<E> w = ctx -> {
                var s = ctx.queryParam(choosenName);
                var c = MalformedParameterValueException.expectingCause(param, s);
                return JsonTypesProcessor.readJson(annotation.lenient(), param.getTarget(), s, c);
            };
            return new Stub<>(w, js, target);
        }
    }
}